<?xml version="1.0" encoding="UTF-8" ?>
<!-- 60초마다 설정 파일의 변경을 확인하여 변경시 갱신 -->
<configuration scan="true" scanPeriod="60 seconds">
    <!-- 로그 패턴에 색상 적용 %clr(pattern){color} https://logback.qos.ch/manual/layouts.html#coloring -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />

    <!-- springProfile 태그를 사용하여 profile 별 property 값 설정 -->
    <springProfile name="dev">
        <!-- dev log file path -->
        <property name="LOG_PATH" value="./log"/>
    </springProfile>
    <springProfile name="prod">
        <!-- prod log file path -->
        <property name="LOG_PATH" value="배포에 따른 위치 재설정"/>
    </springProfile>

    <!-- Environment 내의 프로퍼티들을 개별적으로 설정 -->
    <springProperty scope="context" name="LOG_LEVEL" source="logging.level.root"/>

    <!-- log file name -->
    <property name="LOG_FILE_NAME" value="log"/>
    <!-- err log file name -->
    <property name="ERR_LOG_FILE_NAME" value="err_log"/>
    <!-- warn log file name -->
    <property name="WARN_LOG_FILE_NAME" value="warn_log"/>
    <!-- debug log file name -->
    <property name="DEBUG_LOG_FILE_NAME" value="debug_log"/>
    <!-- console log pattern -->
    <property name="CONSOLE_LOG_PATTERN" value="[%d{yyyy-MM-dd HH:mm:ss}:%-3relative]  %clr(%-5level) %clr(${PID:-}){magenta} %clr(---){faint} %clr([%15.15thread]){faint} %clr(%-40.40logger{36}){cyan} %clr(:){faint} %msg%n"/>
    <!-- file log pattern -->
    <property name="FILE_LOG_PATTERN" value="[%d{yyyy-MM-dd HH:mm:ss}:%-3relative] %-5level ${PID:-} --- [%15.15thread] %-40.40logger{36} : %msg%n"/>

    <!-- Console Appender -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
        </encoder>
    </appender>

    <!--개발 환경에서 로그 파일이 생성이 안되도록 변경-->
    <springProfile name="!dev">
        <!-- File Appender -->
        <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <!-- 파일경로 설정 -->
            <file>${LOG_PATH}/${LOG_FILE_NAME}.log</file>

            <!-- 출력패턴 설정 -->
            <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                <pattern>${FILE_LOG_PATTERN}</pattern>
            </encoder>

            <!-- Rolling 정책 -->
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <!-- .gz .zip 등을 넣으면 자동 일자별 로그 파일 압축 -->
                <fileNamePattern>${LOG_PATH}/${LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.zip</fileNamePattern>
                <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                    <!-- 파일당 최고 용량 kb, mb, gb -->
                    <maxFileSize>10KB</maxFileSize>
                </timeBasedFileNamingAndTriggeringPolicy>
                <!-- 일자별 로그 파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거 -->
                <maxHistory>30</maxHistory>
                <!-- 전체 파일 크기를 제어하며, 전체 크기 제한을 조과하면 가장 오래된 파일을 삭제 -->
                <totalSizeCap>1GB</totalSizeCap>
            </rollingPolicy>
        </appender>

        <!-- WARN 로그 파일 Appender -->
        <appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>warn</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
            </filter>
            <file>${LOG_PATH}/${WARN_LOG_FILE_NAME}.log</file>
            <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                <pattern>${FILE_LOG_PATTERN}</pattern>
            </encoder>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${LOG_PATH}/${WARN_LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.zip</fileNamePattern>
                <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                    <maxFileSize>10KB</maxFileSize>
                </timeBasedFileNamingAndTriggeringPolicy>
                <maxHistory>30</maxHistory>
                <totalSizeCap>1GB</totalSizeCap>
            </rollingPolicy>
        </appender>

        <!-- 에러의 경우 파일에 로그 처리 -->
        <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>error</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
            </filter>
            <file>${LOG_PATH}/${ERR_LOG_FILE_NAME}.log</file>
            <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                <pattern>${FILE_LOG_PATTERN}</pattern>
            </encoder>

            <!-- Rolling 정책 -->
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <!-- .gz .zip 등을 넣으면 자동 일자별 로그파일 압축 -->
                <fileNamePattern>${LOG_PATH}/${ERR_LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.zip</fileNamePattern>
                <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                    <!-- 파일당 최고 용량 kb, mb, gb -->
                    <maxFileSize>10KB</maxFileSize>
                </timeBasedFileNamingAndTriggeringPolicy>
                <!-- 일자별 로그 파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거 -->
                <maxHistory>30</maxHistory>
                <totalSizeCap>1GB</totalSizeCap>
            </rollingPolicy>
        </appender>
    </springProfile>

    <!--로직과 로그 기록을 분리(비동기로 처리)-->
    <appender name="ASYNC_FILE" class="ch.qos.logback.classic.AsyncAppender">
        <!--로그 메시지를 비동기 처리하기 위한 ref 설정-->
        <appender-ref ref="FILE"/>
        <appender-ref ref="ERROR"/>
        <appender-ref ref="WARN_FILE"/>
        <!--몇개의 로그 메시지를 비동기 처리할 것인지-->
        <queueSize>5000</queueSize>
        <!--퍼센트로 계산이 되며 0으로 갈 수록 여유 공간이 없어짐-->
        <discardingThreshold>0</discardingThreshold>
        <!--비동기로 처리할 때 블록하지 않음-->
        <neverBlock>true</neverBlock>
    </appender>

    <!-- root 레벨 설정 (모든 환경에서 콘솔 출력) -->
    <root level="${LOG_LEVEL}">
        <appender-ref ref="CONSOLE"/>
    </root>

    <!-- root 레벨 설정 (dev 환경에서는 파일 로그 제외) -->
    <springProfile name="!dev">
        <root level="${LOG_LEVEL}">
            <appender-ref ref="FILE"/>
            <appender-ref ref="ERROR"/>
            <appender-ref ref="WARN_FILE"/>
            <appender-ref ref="ASYNC_FILE"/>
        </root>
    </springProfile>
</configuration>